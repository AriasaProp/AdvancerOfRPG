in vec3 a_position;
out vec4 v_position;

void main() {
   v_position = vec4(a_position, 1.0);
   gl_Position = v_position;
}
<break>
out vec4 gl_FragColor;
in vec4 v_position;

uniform float u_time;
uniform vec3 u_lightDir;

const float speed = 0.03;
const float clouddark = 0.5;
const float cloudlight = 0.3;
const float cloudcover = 0.2;
const float cloudalpha = 8.0;
const float skytint = 0.5;
const vec3 skycolour1 = vec3(0.0, 0.0, 0.05); // darken
const vec3 skycolour2 = vec3(0.0, 0.7, 1.0); // mid
const vec3 skycolour3 = vec3(1.0, 1.0, 1.0); // sun
const vec3 skycolour4 = vec3(252.0/255.0, 212.0/255.0, 64.0/255.0); // sun light

const mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );
const float K1 = 0.366025404;
const float K2 = 0.211324865;

vec2 hash(in vec2 p) {
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise(in vec2 p) {
	vec2 i = floor(p + (p.x+p.y)*K1);	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));	
}

float fbm(vec2 n) {
	float total = 0.0, amplitude = 0.1;
	for (int i = 0; i < 7; i++) {
		total += noise(n) * amplitude;
		n = m * n;
		amplitude *= 0.4;
	}
	return total;
}

void main() {
    vec2 p = v_position.xz*(0.5+0.5*v_position.y);
    float lightDist = dot(u_lightDir, normalize(v_position.xyz));
	float faded = smoothstep(-0.65, 0.0, lightDist);
	float fadedL = smoothstep(0.1, 0.93, lightDist);
	float sunL = smoothstep(0.95, 1.05, lightDist);
    vec3 result = mix(mix(mix(skycolour1, skycolour2, faded), skycolour3, fadedL), skycolour4, sunL);
	if(faded > 0.0 && fadedL < 1.0){
		float iTime = u_time;
	    vec2 uv = p; 
	    float time = iTime * speed;
	    float q = fbm(uv * 0.5);
	    
		float r = 0.0;
	    uv -= q - time;
	    float weight = 0.8;
	    for (int i=0; i<8; i++){
			r += abs(weight*noise( uv ));
	        uv = m*uv + time;
			weight *= 0.7;
	    }
	    
		float f = 0.0;
	    uv = p;
	    uv -= q - time;
	    weight = 0.7;
	    for (int i=0; i<8; i++){
			f += weight*noise( uv );
	        uv = m*uv + time;
			weight *= 0.6;
	    }
	    
	    f *= r + f;
	    
	    float c = 0.0;
	    time = iTime * speed * 2.0;
	    uv = p;
		uv *= 2.0;
	    uv -= q - time;
	    weight = 0.4;
	    for (int i=0; i<7; i++){
			c += weight*noise( uv );
	        uv = m*uv + time;
			weight *= 0.6;
	    }
	    
	    time = iTime * speed * 3.0;
	    uv = p;
		uv *= 3.0;
	    uv -= q - time;
	    weight = 0.4;
	    for (int i=0; i<7; i++){
			c += abs(weight*noise( uv ));
	        uv = m*uv + time;
			weight *= 0.6;
	    }
		
	    float cloudcolour = clamp((clouddark + cloudlight*c), 0.0, 1.0);
	    f = cloudcover + cloudalpha*f*r;
	    result += clamp(skytint * result + cloudcolour, 0.0, 1.0) * clamp(f + c, 0.0, 1.0) * faded;
	}
	gl_FragColor = vec4( result, 1.0 );
}