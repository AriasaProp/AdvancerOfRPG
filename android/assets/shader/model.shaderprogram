in vec3 a_position;
uniform mat4 u_projViewTrans;
out vec4 v_pos;

#if defined(specularTextureFlag) || defined(specularColorFlag) || defined(fogFlag)
uniform vec4 u_cameraPosition;
#endif // specularTextureFlag or specularColorFlag or fogFlag

#if defined(specularTextureFlag) || defined(specularColorFlag)
out vec3 v_viewVec;
#endif // specularTextureFlag or specularColorFlag

#if defined(colorFlag)
out vec4 v_color;
in vec4 a_color;
#endif // colorFlag

#if defined(diffuseTextureFlag) || defined(specularTextureFlag) || defined(emissiveTextureFlag)
in vec2 a_texCoord0;
#ifdef diffuseTextureFlag
uniform vec4 u_diffuseUVTransform;
out vec2 v_diffuseUV;
#endif
#ifdef specularTextureFlag
uniform vec4 u_specularUVTransform;
out vec2 v_specularUV;
#endif
#ifdef emissiveTextureFlag
uniform vec4 u_emissiveUVTransform;
out vec2 v_emissiveUV;
#endif
#endif // textureFlag

#ifdef boneWeight0Flag
#define boneWeightsFlag
in vec2 a_boneWeight0;
#endif //boneWeight0Flag

#ifdef boneWeight1Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight1;
#endif //boneWeight1Flag

#ifdef boneWeight2Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight2;
#endif //boneWeight2Flag

#ifdef boneWeight3Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight3;
#endif //boneWeight3Flag

#ifdef boneWeight4Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight4;
#endif //boneWeight4Flag

#ifdef boneWeight5Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight5;
#endif //boneWeight5Flag

#ifdef boneWeight6Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight6;
#endif //boneWeight6Flag

#ifdef boneWeight7Flag
#ifndef boneWeightsFlag
#define boneWeightsFlag
#endif
in vec2 a_boneWeight7;
#endif //boneWeight7Flag

#if defined(numBones) && defined(boneWeightsFlag)
#if numBones > 0
#define skinningFlag
#endif
#endif

uniform mat4 u_worldTrans;

#if defined(numBones)
#if numBones > 0
uniform mat4 u_bones[numBones];
#endif //numBones
#endif

#if (numDirectionalLights + numPointLights + numSpotLights > 0) && defined(normalFlag)
in vec3 a_normal;
uniform mat3 u_normalMatrix;
out vec3 v_normal;
#ifdef ambientCubemapFlag
uniform vec3 u_ambientCubemap[6];
#endif // ambientCubemapFlag 

#ifdef sphericalHarmonicsFlag
uniform vec3 u_sphericalHarmonics[9];
#endif //sphericalHarmonicsFlag

#ifdef fogFlag
out float v_fog;
#endif // fogFlag

#if	defined(ambientLightFlag) || defined(ambientCubemapFlag) || defined(sphericalHarmonicsFlag)
#define ambientFlag
#endif //ambientFlag

out vec4 v_lightDiffuse;
#endif // has an light

void main() {
#ifdef diffuseTextureFlag
    v_diffuseUV = u_diffuseUVTransform.xy + a_texCoord0 * u_diffuseUVTransform.zw;
#endif //diffuseTextureFlag

#ifdef emissiveTextureFlag
    v_emissiveUV = u_emissiveUVTransform.xy + a_texCoord0 * u_emissiveUVTransform.zw;
#endif //emissiveTextureFlag

#ifdef specularTextureFlag
    v_specularUV = u_specularUVTransform.xy + a_texCoord0 * u_specularUVTransform.zw;
#endif //specularTextureFlag

#if defined(colorFlag)
    v_color = a_color;
#endif // colorFlag

    mat4 skinning = mat4(1.0,0.0,0.0,0.0,  0.0,1.0,0.0,0.0,  0.0,0.0,1.0,0.0,  0.0,0.0,0.0,1.0);
#ifdef skinningFlag
    skinning = mat4(0.0);
#ifdef boneWeight0Flag
        skinning += (a_boneWeight0.y) * u_bones[int(a_boneWeight0.x)];
#endif //boneWeight0Flag
#ifdef boneWeight1Flag
        skinning += (a_boneWeight1.y) * u_bones[int(a_boneWeight1.x)];
#endif //boneWeight1Flag
#ifdef boneWeight2Flag
        skinning += (a_boneWeight2.y) * u_bones[int(a_boneWeight2.x)];
#endif //boneWeight2Flag
#ifdef boneWeight3Flag
        skinning += (a_boneWeight3.y) * u_bones[int(a_boneWeight3.x)];
#endif //boneWeight3Flag
#ifdef boneWeight4Flag
        skinning += (a_boneWeight4.y) * u_bones[int(a_boneWeight4.x)];
#endif //boneWeight4Flag
#ifdef boneWeight5Flag
        skinning += (a_boneWeight5.y) * u_bones[int(a_boneWeight5.x)];
#endif //boneWeight5Flag
#ifdef boneWeight6Flag
        skinning += (a_boneWeight6.y) * u_bones[int(a_boneWeight6.x)];
#endif //boneWeight6Flag
#ifdef boneWeight7Flag
        skinning += (a_boneWeight7.y) * u_bones[int(a_boneWeight7.x)];
#endif //boneWeight7Flag
#endif //skinningFlag
    v_pos = u_worldTrans * skinning * vec4(a_position, 1.0);
    gl_Position = u_projViewTrans * v_pos;
    
#ifdef fogFlag
    vec3 flen = u_cameraPosition.xyz - pos.xyz;
    float fog = dot(flen, flen) * u_cameraPosition.w;
    v_fog = min(fog, 1.0);
#endif

#if (numDirectionalLights + numPointLights + numSpotLights > 0) && defined(normalFlag)
    vec3 normal = normalize((u_worldTrans * skinning * vec4(a_normal, 0.0)).xyz);
    v_normal = normal;
    v_lightDiffuse = vec4(0.0);
#ifdef ambientCubemapFlag
    vec3 squaredNormal = normal * normal;
    vec3 isPositive  = step(0.0, normal);
    v_lightDiffuse += squaredNormal.x * mix(u_ambientCubemap[0], u_ambientCubemap[1], isPositive.x) +
            squaredNormal.y * mix(u_ambientCubemap[2], u_ambientCubemap[3], isPositive.y) +
            squaredNormal.z * mix(u_ambientCubemap[4], u_ambientCubemap[5], isPositive.z);
#endif // ambientCubemapFlag

#ifdef sphericalHarmonicsFlag
    v_lightDiffuse += u_sphericalHarmonics[0];
    v_lightDiffuse += u_sphericalHarmonics[1] * normal.x;
    v_lightDiffuse += u_sphericalHarmonics[2] * normal.y;
    v_lightDiffuse += u_sphericalHarmonics[3] * normal.z;
    v_lightDiffuse += u_sphericalHarmonics[4] * (normal.x * normal.z);
    v_lightDiffuse += u_sphericalHarmonics[5] * (normal.z * normal.y);
    v_lightDiffuse += u_sphericalHarmonics[6] * (normal.y * normal.x);
    v_lightDiffuse += u_sphericalHarmonics[7] * (3.0 * normal.z * normal.z - 1.0);
    v_lightDiffuse += u_sphericalHarmonics[8] * (normal.x * normal.x - normal.y * normal.y);
#endif // sphericalHarmonicsFlag

#if defined(specularTextureFlag) || defined(specularColorFlag)
    v_viewVec = normalize(u_cameraPosition.xyz - v_pos.xyz);
#endif // specularTextureFlag or specularColorFlag
#endif // has an light
}
<break>
in vec4 gl_FragCoord;
out vec4 gl_FragColor;

in vec4 v_pos;

#if defined(specularTextureFlag) || defined(specularColorFlag)
in vec3 v_viewVec;
#endif // specularTextureFlag or specularColorFlag 

#if defined(colorFlag)
in vec4 v_color;
#endif

#ifdef blendedFlag
uniform float u_opacity;
#endif // blendedFlag

#if defined(diffuseTextureFlag) || defined(specularTextureFlag) || defined(emissiveTextureFlag)
#ifdef diffuseTextureFlag
in MED vec2 v_diffuseUV;
uniform sampler2D u_diffuseTexture;
#endif
#ifdef specularTextureFlag
in MED vec2 v_specularUV;
uniform sampler2D u_specularTexture;
#endif
#ifdef emissiveTextureFlag
in MED vec2 v_emissiveUV;
uniform sampler2D u_emissiveTexture;
#endif
#endif // textureFlag

#ifdef diffuseColorFlag
uniform vec4 u_diffuseColor;
#endif

#ifdef specularColorFlag
uniform vec4 u_specularColor;
#endif

#ifdef normalTextureFlag
uniform sampler2D u_normalTexture;
#endif

#ifdef emissiveColorFlag
uniform vec4 u_emissiveColor;
#endif

#ifdef shininessFlag
uniform float u_shininess;
#else
const float u_shininess = 20.0;
#endif // shininessFlag

#if (numDirectionalLights + numPointLights + numSpotLights > 0) && defined(normalFlag)
in vec3 v_normal;
in vec4 v_lightDiffuse;
#if (numDirectionalLights > 0)
uniform vec4 u_dirLights_color[numDirectionalLights];
uniform vec3 u_dirLights_direction[numDirectionalLights];
#ifdef shadowPCFOffset
uniform mat4 u_dirLights_projection[numDirectionalLights];
uniform int u_dirLights_shadowIndex[numDirectionalLights];
#endif
#endif //numDirectionalLights

#if (numPointLights > 0)
uniform vec4 u_pointLights_color[numPointLights];
uniform vec3 u_pointLights_position[numPointLights];
uniform vec2 u_pointLights_nearFar[numPointLights];
#ifdef shadowPCFOffset
uniform int u_pointLights_shadowIndex[numPointLights];
#endif
#endif //numPointLights

#if numSpotLights > 0
uniform vec4 u_spotLights_color[numSpotLights];
uniform vec3 u_spotLights_position[numSpotLights];
uniform vec3 u_spotLights_direction[numSpotLights];
//for cuttoffAngle, exponent, near, far
uniform vec4 u_spotLights_cAENF[numSpotLights];
#ifdef shadowPCFOffset
uniform int u_spotLights_shadowIndex[numSpotLights];
#endif
#endif //numSpotLights

#ifdef shadowPCFOffset
uniform sampler2DArray u_shadowMaps;
#endif // shadowMap

#endif //has light

#ifdef fogFlag
uniform vec4 u_fogColor;
in float v_fog;
#endif // fogFlag

void main() {
    vec4 light = vec4(1.0);
#if (numDirectionalLights + numPointLights + numSpotLights > 0) && defined(normalFlag)
    light = v_lightDiffuse;
    vec3 normal = v_normal;
	vec4 specular = vec4(0.0);
#if (numDirectionalLights > 0)
    for(int i = 0; i < numDirectionalLights; i++) {
        vec3 lightDir = -u_dirLights_direction[i];
        vec4 res = u_dirLights_color[i] * clamp(dot(normal, lightDir), 0.0, 1.0);
#ifdef shadowPCFOffset
        float t_ind = float(u_dirLights_shadowIndex[i]);
        if(t_ind >= 0.0){
            vec4 spos = u_dirLights_projection[i] * v_pos;
            vec3 shadow = (spos.xyz / spos.w) * 0.5 + 0.5;
            if (shadow.z < 0.0) continue;
            res *= (step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy + shadowPCFOffset,t_ind)).r)
            + step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy + vec2(shadowPCFOffset, -shadowPCFOffset),t_ind)).r)
            + step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy,t_ind)).r)
            + step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy + vec2(-shadowPCFOffset, shadowPCFOffset),t_ind)).r)
            + step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy - shadowPCFOffset,t_ind)).r))
            * 0.2;
        }
#endif //shadowMapping
        light += res;
#if defined(specularTextureFlag) || defined(specularColorFlag)
        float halfDotView = max(0.0, dot(v_normal, normalize(lightDir + v_viewVec)));
        specular += pow(halfDotView, u_shininess) * res;
#endif // specularTextureFlag or specularColorFlag
    }
#endif //numDirectionalLights
#if (numPointLights > 0)
    for(int i = 0; i < numPointLights; i++){
        vec3 lightDir = u_pointLights_position[i] - v_pos.xyz;
        float dist = sqrt(dot(lightDir,lightDir));
        float far = (u_pointLights_nearFar[i].y - dist)/(u_pointLights_nearFar[i].y - u_pointLights_nearFar[i].x);
        if(far < 0.0) continue;
        vec4 res = u_pointLights_color[i];
        lightDir /= dist;
        if(far <= 1.0) {
            res *= far * clamp(dot(v_normal, lightDir), 0.0, 1.0);
#ifdef shadowPCFOffset
            vec3 shadow = vec3(0.0);
            shadow.z = float(u_pointLights_shadowIndex[i]);
            if(shadow.z >= 0.0) {
                vec3 absDir = abs(lightDir);
                if ((absDir.x>=absDir.y)&&(absDir.x>=absDir.z)) {
                    shadow.x = 0.5 - lightDir.z / lightDir.x;
                    shadow.y = 0.5 - lightDir.y / absDir.x;
                    shadow.z += (lightDir.x >= 0.0) ? 0.0 : 1.0;
                } else if ((absDir.y>=absDir.x)&&(absDir.y>=absDir.z)) {
                    shadow.x = 0.5 + lightDir.x / absDir.y;
                    shadow.y = 0.5 + lightDir.z / lightDir.y;
                    shadow.z += (lightDir.y >= 0.0) ? 2.0 : 3.0;
                } else {
                    shadow.x = 0.5 + lightDir.x / lightDir.z;
                    shadow.y = 0.5 - lightDir.y / absDir.z;
                    shadow.z += (lightDir.z >= 0.0) ? 4.0 : 5.0;
                }
                res *= step(far, texture(u_shadowMaps, shadow).r);
            }
#endif //shadowMapping
        }
        light += res;
#if defined(specularTextureFlag) || defined(specularColorFlag)
        float halfDotView = max(0.0, dot(v_normal, normalize(lightDir + v_viewVec)));
        specular += pow(halfDotView, u_shininess) * res;
#endif // specularTextureFlag or specularColorFlag
    }
#endif //numPointLights
#if (numSpotLights > 0)
    for(int i = 0; i < numSpotLights; i++) {
        vec3 lightDir = -u_dirLights_direction[i];
        vec4 res = u_spotLights_color[i] * clamp(dot(normal, lightDir), 0.0, 1.0);
#ifdef shadowPCFOffset
        float t_ind = float(u_spotLights_shadowIndex[i]);
        if(t_ind >= 0.0){
            vec4 spos = v_pos;
            vec3 shadow = (spos.xyz / spos.w) * 0.5 + 0.5;
            if (shadow.z < 0.0) continue;
            res *= step(shadow.z, texture(u_shadowMaps, vec3(shadow.xy + shadowPCFOffset,t_ind)).r);
        }
#endif //shadowMapping
        light += res;
#if defined(specularTextureFlag) || defined(specularColorFlag)
        float halfDotView = max(0.0, dot(v_normal, normalize(lightDir + v_viewVec)));
        specular += pow(halfDotView, u_shininess) * res;
#endif // specularTextureFlag or specularColorFlag
    }
#endif //numSpotLights
    
#ifdef specularTextureFlag
    specular *= texture(u_specularTexture, v_specularUV);
#endif //specularTextureFlag
#ifdef specularColorFlag
    specular *= u_specularColor;
#endif //specularColorFlag
    gl_FragColor += specular;

#endif //has an light

    vec4 emissive = vec4(0.0);
#if defined(emissiveTextureFlag) || defined(emissiveColorFlag)
	emissive = vec4(1.0);
#if defined(emissiveTextureFlag)
    emissive *= texture(u_emissiveTexture, v_emissiveUV);
#endif //emissiveTextureFlag
#if defined(emissiveColorFlag)
    emissive *= u_emissiveColor;
#endif //emissiveColorFlag
#endif //has emissive

    vec4 diffuse = vec4(0.0);
#if defined(diffuseTextureFlag) || defined(diffuseColorFlag) || defined(colorFlag)
    diffuse = vec4(1.0);
#ifdef diffuseTextureFlag
    diffuse *= texture(u_diffuseTexture, v_diffuseUV);
#endif //diffuseTextureFlag
#ifdef diffuseColorFlag
    diffuse *= u_diffuseColor;
#endif //diffuseColorFlag
#ifdef colorFlag
    diffuse *= v_color;
#endif //colorFlag
#endif //has diffuse color
    gl_FragColor += light * (diffuse + emissive);
    
#ifdef fogFlag
    gl_FragColor.rgb = mix(gl_FragColor.rgb, u_fogColor.rgb, v_fog);
#endif // end fogFlag

#ifdef blendedFlag
    gl_FragColor.a *= u_opacity;
    if (gl_FragColor.a <= 0.0)
        discard;
#else
    gl_FragColor.a = 1.0;
#endif
}
